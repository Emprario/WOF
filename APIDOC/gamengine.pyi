from _typeshed import Incomplete
from entities import Entity, Piece
from player import Player

class FeurEngine:
    size: Incomplete
    display: Incomplete
    active_pieces: Incomplete
    background: Incomplete
    darkness: Incomplete
    FONT: Incomplete
    def __init__(self) -> None: ...
    def load_background(self, texturemap) -> None: ...
    def load_interface(self, player) -> None: ...
    def display_update(self, player, texturemap) -> None: ...
    def events(self) -> tuple[int, int]: ...
    def blit_pieces(self) -> None: ...
    def blit_blank(self, msg: str | None = ..., subtitle: str | None = ...): ...

class MaitreDuJeu:
    players: Incomplete
    players_colors: Incomplete
    MO: Incomplete
    fengine: Incomplete
    registery: Incomplete
    hack: Incomplete
    highlighted_cases: Incomplete
    config: Incomplete
    def __init__(self) -> None: ...
    def get_other_player(self, player: Player) -> Player: ...
    def update_registery(self, player: Player) -> None: ...
    def update_visible_pieces(self) -> None: ...
    def OneTour(self) -> None: ...
    def mainloop(self) -> None: ...
    def repercussions(self) -> None: ...
    def is_ended(self) -> bool: ...
    def end(self) -> None: ...
    def collect_money(self, player) -> None: ...
    def actions(self, mouse: tuple[int, int], player: Player): ...
    def attack(self, origin: Entity, cible: Entity): ...
    def mvto(self, cible: Entity, case: tuple[int, int]): ...
    def show_attack(self, cible: Entity, target: Player) -> list: ...
    def show_mvto(self, cible: Entity) -> list: ...
    def highlight_case(self, case: tuple[int, int], color: tuple[int, int, int]): ...
    def disable_highlight_all(self) -> None: ...
    def unreference_piece(self, piece: Piece) -> None: ...
